#!/bin/bash

# Supabase Traefik Deployment Script - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Supabase —Å Traefik reverse proxy
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ best practices –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[i]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ git: sudo apt install git"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ docker: sudo apt install docker.io"
        exit 1
    fi
    
    if ! command -v docker compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install docker-compose-plugin"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ proxy
    if ! docker network ls | grep -q "proxy"; then
        print_error "–°–µ—Ç—å 'proxy' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Traefik –∑–∞–ø—É—â–µ–Ω –∏ —Å–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∞."
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
}

generate_jwt_secret() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-40
}

generate_api_key() {
    local jwt_secret=$1
    local payload='{"role":"'$2'","iss":"supabase","iat":'$(date +%s)',"exp":'$(date -d "+10 years" +%s)'}'
    echo -n "$payload" | \
        openssl dgst -sha256 -hmac "$jwt_secret" -binary | \
        base64 -w 0 | tr '+/' '-_' | tr -d '='
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_info "üöÄ Supabase Traefik Deployment Script (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"
    
    check_dependencies
    
    # –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–∞
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): " DOMAIN
    
    if [[ -z "$DOMAIN" ]]; then
        print_error "–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        exit 1
    fi
    
    local SUPABASE_DOMAIN="supabase.$DOMAIN"
    print_info "Supabase –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://$SUPABASE_DOMAIN"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞..."
    mkdir -p supabase
    cd supabase
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if [[ ! -f "docker-compose.yml" ]]; then
        print_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Supabase..."
        git clone --depth 1 https://github.com/supabase/supabase.git temp
        mv temp/docker/* .
        rm -rf temp
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –∏ –∫–ª—é—á–µ–π
    print_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∏ –∫–ª—é—á–µ–π..."
    
    local POSTGRES_PASSWORD=$(generate_password)
    local JWT_SECRET=$(generate_jwt_secret)
    local DASHBOARD_PASSWORD=$(generate_password)
    local ANON_KEY=$(generate_api_key "$JWT_SECRET" "anon")
    local SERVICE_ROLE_KEY=$(generate_api_key "$JWT_SECRET" "service_role")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–∞ –¥–ª—è Postgres (–Ω–∞–π–¥–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π)
    local POSTGRES_PORT=$(python3 -c "
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
port = 5433
while port < 6000:
    try:
        s.bind(('localhost', port))
        s.close()
        print(port)
        break
    except OSError:
        port += 1
" 2>/dev/null || echo "5433")
    
    cat > .env << EOF
############
# Database #
############
POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=$POSTGRES_PORT  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å n8n
POSTGRES_USER=postgres
POSTGRES_PASSWORD=$POSTGRES_PASSWORD

############
# Supabase #
############
JWT_SECRET=$JWT_SECRET
ANON_KEY=$ANON_KEY
SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY

# API
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443
API_EXTERNAL_URL=https://$SUPABASE_DOMAIN

# Studio
STUDIO_DEFAULT_ORGANIZATION=Supabase
STUDIO_DEFAULT_PROJECT=Default Project
STUDIO_PORT=3000
SUPABASE_PUBLIC_URL=https://$SUPABASE_DOMAIN
SITE_URL=https://$SUPABASE_DOMAIN
ADDITIONAL_REDIRECT_URLS=

# Auth
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=true
ENABLE_ANONYMOUS_USERS=false
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true

# Mailer
MAILER_URLPATHS_INVITE=/auth/v1/verify
MAILER_URLPATHS_CONFIRMATION=/auth/v1/verify
MAILER_URLPATHS_RECOVERY=/auth/v1/verify
MAILER_URLPATHS_EMAIL_CHANGE=/auth/v1/verify

# SMTP
SMTP_ADMIN_EMAIL=admin@$DOMAIN
SMTP_HOST=supabase-mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender

# Storage
STORAGE_BACKEND=file
FILE_STORAGE_BACKEND_PATH=/var/lib/storage
GLOBAL_S3_BUCKET=stub
AWS_ACCESS_KEY_ID=stub
AWS_SECRET_ACCESS_KEY=stub
AWS_DEFAULT_REGION=stub

# Analytics disabled
ANALYTICS_ENABLED=false
LOGFLARE_API_KEY=stub
LOGFLARE_PUBLIC_ACCESS_TOKEN=stub
LOGFLARE_PRIVATE_ACCESS_TOKEN=stub

# Edge Functions
FUNCTIONS_HTTP_PORT=9002
FUNCTIONS_VERIFY_JWT=false
DOCKER_SOCKET_LOCATION=/var/run/docker.sock

# Realtime
REALTIME_IP_VERSION=IPv4

# Pooler - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
POOLER_TENANT_ID=your-tenant-id
POOLER_PROXY_PORT_TRANSACTION=6543
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
POOLER_DB_POOL_SIZE=15

# Vault
VAULT_ENC_KEY=$(generate_password)

# Storage secrets
POSTGREST_JWT_SECRET=$JWT_SECRET
PGRST_DB_SCHEMAS=public,storage,graphql_public
PGRST_DB_ANON_ROLE=anon

# Dashboard
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=$DASHBOARD_PASSWORD

# Secrets for other services
SECRET_KEY_BASE=$(generate_password)

# Default values for services
IMGPROXY_ENABLE_WEBP_DETECTION=true
ENABLE_IMAGE_PROXIMATION=true
EOF
    
    print_success "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: .env"
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ docker-compose.yml - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π volume
    print_info "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ docker-compose.yml..."
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π docker-compose.yml
    cp docker-compose.yml docker-compose.yml.backup
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π volume –¥–ª—è docker socket
    sed -i '/DOCKER_SOCKET_LOCATION/d' docker-compose.yml
    sed -i 's|${DOCKER_SOCKET_LOCATION}:/var/run/docker.sock:ro,z|/var/run/docker.sock:/var/run/docker.sock:ro|g' docker-compose.yml
    
    # –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.override.yml –¥–ª—è Traefik
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Traefik..."
    
    cat > docker-compose.override.yml << EOF
version: "3.8"

services:
  # –û—Ç–∫–ª—é—á–∞–µ–º vector —Ç–∞–∫ –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
  vector:
    profiles:
      - analytics
    deploy:
      replicas: 0

  studio:
    labels:
      - traefik.enable=true
      - traefik.http.routers.supabase-studio.rule=Host(\`${SUPABASE_DOMAIN}\`)
      - traefik.http.routers.supabase-studio.entrypoints=websecure
      - traefik.http.routers.supabase-studio.tls.certresolver=letsencrypt
      - traefik.http.services.supabase-studio.loadbalancer.server.port=3000
    networks:
      - default
      - proxy

  kong:
    labels:
      - traefik.enable=true
      - traefik.http.routers.supabase-api.rule=Host(\`${SUPABASE_DOMAIN}\`) && PathPrefix(\`/auth\`, \`/rest\`, \`/storage\`, \`/realtime\`)
      - traefik.http.routers.supabase-api.entrypoints=websecure
      - traefik.http.routers.supabase-api.tls.certresolver=letsencrypt
      - traefik.http.services.supabase-api.loadbalancer.server.port=8000
    networks:
      - default
      - proxy

networks:
  proxy:
    external: true
EOF
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Traefik —Å–æ–∑–¥–∞–Ω–∞: docker-compose.override.yml"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..."
    
    cat > manage.sh << 'EOF'
#!/bin/bash

case "$1" in
    start)
        echo "–ó–∞–ø—É—Å–∫ Supabase..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
        ;;
    stop)
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Supabase..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml down
        ;;
    restart)
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Supabase..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml restart
        ;;
    logs)
        echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml logs -f
        ;;
    update)
        echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml pull
        docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
        ;;
    status)
        echo "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml ps
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|logs|update|status}"
        exit 1
        ;;
esac
EOF
    
    chmod +x manage.sh
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_info "–ó–∞–ø—É—Å–∫ Supabase..."
    docker compose -f docker-compose.yml -f docker-compose.override.yml pull
    docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker compose ps
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print_success "‚ú® Supabase —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
    echo
    print_info "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "   Supabase Studio: https://$SUPABASE_DOMAIN"
    echo "   Username: admin"
    echo "   Password: $DASHBOARD_PASSWORD"
    echo
    echo "   Database Connection:"
    echo "   Host: $SUPABASE_DOMAIN"
    echo "   Port: 5432"
    echo "   Database: postgres"
    echo "   User: postgres"
    echo "   Password: $POSTGRES_PASSWORD"
    echo
    print_info "üìÅ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:"
    echo "   –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo "   –§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è: .env"
    echo "   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Traefik: docker-compose.override.yml"
    echo
    print_info "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "   –ó–∞–ø—É—Å–∫: ./manage.sh start"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ./manage.sh stop"
    echo "   –†–µ—Å—Ç–∞—Ä—Ç: ./manage.sh restart"
    echo "   –õ–æ–≥–∏: ./manage.sh logs"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'print_error "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $LINENO. –í—ã—Ö–æ–¥."' ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main