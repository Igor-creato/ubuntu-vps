#!/bin/bash

# Supabase Traefik Deployment Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Supabase —Å Traefik reverse proxy
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ best practices –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[i]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ git: sudo apt install git"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ docker: sudo apt install docker.io"
        exit 1
    fi
    
    if ! command -v docker compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install docker-compose-plugin"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ proxy
    if ! docker network ls | grep -q "proxy"; then
        print_error "–°–µ—Ç—å 'proxy' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Traefik –∑–∞–ø—É—â–µ–Ω –∏ —Å–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∞."
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
}

generate_jwt_secret() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-40
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π
generate_api_keys() {
    local jwt_secret=$1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ANON_KEY
    local anon_payload='{"role":"anon","iss":"supabase","iat":'$(date +%s)',"exp":'$(date -d "+10 years" +%s)'}'
    local anon_key=$(echo -n "$anon_payload" | \
        openssl dgst -sha256 -hmac "$jwt_secret" -binary | \
        base64 -w 0 | tr '+/' '-_' | tr -d '=')
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SERVICE_ROLE_KEY
    local service_payload='{"role":"service_role","iss":"supabase","iat":'$(date +%s)',"exp":'$(date -d "+10 years" +%s)'}'
    local service_key=$(echo -n "$service_payload" | \
        openssl dgst -sha256 -hmac "$jwt_secret" -binary | \
        base64 -w 0 | tr '+/' '-_' | tr -d '=')
    
    echo "$anon_key:$service_key"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_info "üöÄ Supabase Traefik Deployment Script"
    print_info "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Supabase —Å Traefik reverse proxy"
    
    check_dependencies
    
    # –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–∞
    read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): " DOMAIN
    
    if [[ -z "$DOMAIN" ]]; then
        print_error "–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        exit 1
    fi
    
    local SUPABASE_DOMAIN="supabase.$DOMAIN"
    print_info "Supabase –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://$SUPABASE_DOMAIN"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞..."
    mkdir -p supabase
    cd supabase
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if [[ ! -d "docker" ]]; then
        print_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Supabase..."
        git clone --depth 1 https://github.com/supabase/supabase.git temp
        mv temp/docker/* .
        rm -rf temp
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –∏ –∫–ª—é—á–µ–π
    print_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∏ –∫–ª—é—á–µ–π..."
    
    local POSTGRES_PASSWORD=$(generate_password)
    local JWT_SECRET=$(generate_jwt_secret)
    local DASHBOARD_PASSWORD=$(generate_password)
    local POOLER_TENANT_ID=$(openssl rand -hex 8)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π
    local api_keys=$(generate_api_keys "$JWT_SECRET")
    local ANON_KEY=$(echo "$api_keys" | cut -d':' -f1)
    local SERVICE_ROLE_KEY=$(echo "$api_keys" | cut -d':' -f2)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    cat > .env << EOF
# Supabase Configuration
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
JWT_SECRET=$JWT_SECRET
ANON_KEY=$ANON_KEY
SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY

# Database Configuration
POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=5432
POSTGRES_USER=postgres

# Pooler Configuration
POOLER_TENANT_ID=$POOLER_TENANT_ID
POOLER_PROXY_PORT_TRANSACTION=6543

# Studio Configuration
STUDIO_DEFAULT_ORGANIZATION=Supabase
STUDIO_DEFAULT_PROJECT=Default Project
STUDIO_PORT=3000

# Kong Configuration
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

# Dashboard Authentication
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=$DASHBOARD_PASSWORD

# URLs
SUPABASE_PUBLIC_URL=https://$SUPABASE_DOMAIN
SITE_URL=https://$SUPABASE_DOMAIN
ADDITIONAL_REDIRECT_URLS=

# SMTP Configuration (–∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
SMTP_ADMIN_EMAIL=admin@$DOMAIN
SMTP_HOST=supabase-mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender

# Storage Configuration
STORAGE_BACKEND=file
FILE_STORAGE_BACKEND_PATH=/var/lib/storage

# Analytics (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
ANALYTICS_ENABLED=false

# Edge Functions
FUNCTIONS_HTTP_PORT=9002

# Realtime Configuration
REALTIME_IP_VERSION=IPv4

# Other services
ENABLE_IMAGE_PROXIMATION=true
IMGPROXY_ENABLE_WEBP_DETECTION=true
EOF
    
    print_success "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: .env"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.override.yml –¥–ª—è Traefik
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Traefik..."
    
    cat > docker-compose.override.yml << EOF
version: "3.8"

services:
  studio:
    labels:
      - traefik.enable=true
      - traefik.http.routers.supabase-studio.rule=Host(\`${SUPABASE_DOMAIN}\`)
      - traefik.http.routers.supabase-studio.entrypoints=websecure
      - traefik.http.routers.supabase-studio.tls.certresolver=letsencrypt
      - traefik.http.services.supabase-studio.loadbalancer.server.port=3000
    networks:
      - default
      - proxy

  kong:
    labels:
      - traefik.enable=true
      - traefik.http.routers.supabase-api.rule=Host(\`${SUPABASE_DOMAIN}\`) && PathPrefix(\`/auth\`, \`/rest\`, \`/storage\`, \`/realtime\`)
      - traefik.http.routers.supabase-api.entrypoints=websecure
      - traefik.http.routers.supabase-api.tls.certresolver=letsencrypt
      - traefik.http.services.supabase-api.loadbalancer.server.port=8000
    networks:
      - default
      - proxy

networks:
  proxy:
    external: true
EOF
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Traefik —Å–æ–∑–¥–∞–Ω–∞: docker-compose.override.yml"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..."
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º
    cat > manage.sh << 'EOF'
#!/bin/bash

case "$1" in
    start)
        echo "–ó–∞–ø—É—Å–∫ Supabase..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
        ;;
    stop)
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Supabase..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml down
        ;;
    restart)
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Supabase..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml restart
        ;;
    logs)
        echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml logs -f
        ;;
    update)
        echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml pull
        docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
        ;;
    status)
        echo "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml ps
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|logs|update|status}"
        exit 1
        ;;
esac
EOF
    
    chmod +x manage.sh
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    cat > backup.sh << 'EOF'
#!/bin/bash

BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker compose exec db pg_dump -U postgres postgres > "$BACKUP_DIR/database.sql"

echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cp .env "$BACKUP_DIR/"
cp docker-compose.yml "$BACKUP_DIR/"
cp docker-compose.override.yml "$BACKUP_DIR/"

echo "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_DIR"
EOF
    
    chmod +x backup.sh
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_info "–ó–∞–ø—É—Å–∫ Supabase..."
    docker compose -f docker-compose.yml -f docker-compose.override.yml pull
    docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker compose ps
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print_success "‚ú® Supabase —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
    echo
    print_info "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "   Supabase Studio: https://$SUPABASE_DOMAIN"
    echo "   Username: admin"
    echo "   Password: $DASHBOARD_PASSWORD"
    echo
    echo "   Database Connection:"
    echo "   Host: $SUPABASE_DOMAIN"
    echo "   Port: 5432"
    echo "   Database: postgres"
    echo "   User: postgres"
    echo "   Password: $POSTGRES_PASSWORD"
    echo
    print_info "üìÅ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:"
    echo "   –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo "   –§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è: .env"
    echo "   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Traefik: docker-compose.override.yml"
    echo
    print_info "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "   –ó–∞–ø—É—Å–∫: ./manage.sh start"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ./manage.sh stop"
    echo "   –†–µ—Å—Ç–∞—Ä—Ç: ./manage.sh restart"
    echo "   –õ–æ–≥–∏: ./manage.sh logs"
    echo "   –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: ./backup.sh"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'print_error "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $LINENO. –í—ã—Ö–æ–¥."' ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main