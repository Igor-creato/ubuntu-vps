#!/bin/bash

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π N8N —Å–∫—Ä–∏–ø—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

set -e

echo "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N —Å Redis..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

echo "‚úÖ Docker –Ω–∞–π–¥–µ–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–π
echo "üì° –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–π..."
docker network create proxy 2>/dev/null || true
docker network create backend 2>/dev/null || true

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫..."
mkdir -p hook
cd hook
mkdir -p data/n8n data/redis

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
KEY=$(openssl rand -base64 32)

# –°–æ–∑–¥–∞–Ω–∏–µ .env (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±)
echo "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ .env..."
echo "N8N_ENCRYPTION_KEY=$KEY" > .env
echo "EXECUTIONS_MODE=queue" >> .env
echo "N8N_HOST=hook.autmatization-bot.ru" >> .env
echo "N8N_PROTOCOL=https" >> .env
echo "WEBHOOK_URL=https://hook.autmatization-bot.ru/" >> .env
echo "N8N_EDITOR_HOST=n8n.autmatization-bot.ru" >> .env
echo "QUEUE_BULL_REDIS_HOST=redis" >> .env
echo "QUEUE_BULL_REDIS_PORT=6379" >> .env
echo "QUEUE_BULL_REDIS_DB=0" >> .env
echo "N8N_RUNNERS_ENABLED=true" >> .env
echo "N8N_BLOCK_ENV_ACCESS_IN_NODE=false" >> .env
echo "N8N_GIT_NODE_DISABLE_BARE_REPOS=true" >> .env
echo "N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true" >> .env
echo "N8N_METRICS=true" >> .env
echo "N8N_LOG_LEVEL=info" >> .env
echo "GENERIC_TIMEZONE=Europe/Moscow" >> .env
echo "QUEUE_HEALTH_CHECK_ACTIVE=true" >> .env

# –°–æ–∑–¥–∞–Ω–∏–µ docker-compose (–ø–æ—Å—Ç—Ä–æ—á–Ω–æ)
echo "üê≥ –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml..."

cat > docker-compose.yml << 'ENDFILE'
services:
  redis:
    image: redis:7-alpine
    container_name: n8n_redis
    restart: unless-stopped
    command: redis-server --appendonly no --save ""
    volumes:
      - ./data/redis:/data
    networks:
      - n8n-internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n-main:
    image: n8nio/n8n:latest
    container_name: n8n_main
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - N8N_HOST=hook.autmatization-bot.ru
      - N8N_PROTOCOL=https
      - N8N_PORT=5678
      - WEBHOOK_URL=https://hook.autmatization-bot.ru/
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      - N8N_RUNNERS_ENABLED=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=false
      - N8N_GIT_NODE_DISABLE_BARE_REPOS=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      - GENERIC_TIMEZONE=Europe/Moscow
      - QUEUE_HEALTH_CHECK_ACTIVE=true
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - n8n-internal
      - proxy
      - backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.n8n-main.rule=Host(`hook.autmatization-bot.ru`)
      - traefik.http.routers.n8n-main.entrypoints=websecure
      - traefik.http.routers.n8n-main.tls.certresolver=letsencrypt
      - traefik.http.services.n8n-main.loadbalancer.server.port=5678

  n8n-editor:
    image: n8nio/n8n:latest
    container_name: n8n_editor
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - N8N_HOST=n8n.autmatization-bot.ru
      - N8N_PROTOCOL=https
      - N8N_PORT=5678
      - WEBHOOK_URL=https://hook.autmatization-bot.ru/
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      - N8N_RUNNERS_ENABLED=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=false
      - N8N_GIT_NODE_DISABLE_BARE_REPOS=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=true
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      - GENERIC_TIMEZONE=Europe/Moscow
      - QUEUE_HEALTH_CHECK_ACTIVE=true
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - n8n-internal
      - proxy
      - backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.n8n-editor.rule=Host(`n8n.autmatization-bot.ru`)
      - traefik.http.routers.n8n-editor.entrypoints=websecure
      - traefik.http.routers.n8n-editor.tls.certresolver=letsencrypt
      - traefik.http.services.n8n-editor.loadbalancer.server.port=5678

  n8n-worker:
    image: n8nio/n8n:latest
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    command: ["worker", "--concurrency=10"]
    environment:
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      - N8N_RUNNERS_ENABLED=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=false
      - N8N_GIT_NODE_DISABLE_BARE_REPOS=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_LOG_LEVEL=info
      - GENERIC_TIMEZONE=Europe/Moscow
      - QUEUE_HEALTH_CHECK_ACTIVE=true
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - n8n-internal
      - backend
    deploy:
      replicas: 2

networks:
  n8n-internal:
    driver: bridge
  proxy:
    external: true
    name: proxy          # ‚Üê —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å —è–≤–Ω–æ (—Ö–æ—Ç—è –∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –∏–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
  backend:
    external: true
    name: wp-backend     # ‚Üê –ö–õ–Æ–ß–ï–í–ê–Ø –°–¢–†–û–ö–ê!
ENDFILE

# –°–æ–∑–¥–∞–Ω–∏–µ manage.sh
echo "üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ manage.sh..."
cat > manage.sh << 'MANAGESCRIPT'
#!/bin/bash
case "$1" in
    start)
        echo "üöÄ –ó–∞–ø—É—Å–∫ N8N..."
        docker compose up -d
        echo "‚úÖ N8N –∑–∞–ø—É—â–µ–Ω!"
        echo "üîó Webhook: https://hook.autmatization-bot.ru/"
        echo "‚úèÔ∏è Editor: https://n8n.autmatization-bot.ru/"
        ;;
    stop)
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ N8N..."
        docker compose down
        echo "‚úÖ N8N –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
    logs)
        docker compose logs -f
        ;;
    status)
        docker compose ps
        ;;
    *)
        echo "–ö–æ–º–∞–Ω–¥—ã: start, stop, logs, status"
        ;;
esac
MANAGESCRIPT

chmod +x manage.sh

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤
echo "üîí –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤..."
chown -R 1000:1000 ./data/n8n 2>/dev/null || sudo chown -R 1000:1000 ./data/n8n 2>/dev/null || true
chmod -R 755 ./data/n8n 2>/dev/null || sudo chmod -R 755 ./data/n8n 2>/dev/null || true

echo ""
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üîë –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: $KEY"
echo ""
echo "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
echo "  ./manage.sh start  - –ó–∞–ø—É—Å–∫"
echo "  ./manage.sh stop   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
echo "  ./manage.sh logs   - –õ–æ–≥–∏"
echo "  ./manage.sh status - –°—Ç–∞—Ç—É—Å"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ YAML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml..."
if docker compose config >/dev/null 2>&1; then
    echo "‚úÖ docker-compose.yml —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –≤ docker-compose.yml:"
    docker compose config
    exit 1
fi

# –ó–∞–ø—É—Å–∫
read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å N8N —Å–µ–π—á–∞—Å? (y/n): " -r
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    echo "üöÄ –ó–∞–ø—É—Å–∫ N8N..."
    docker compose up -d
    
    echo ""
    echo "üéâ N8N —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
    echo ""
    echo "üîó Webhook: https://hook.autmatization-bot.ru/"
    echo "‚úèÔ∏è Editor: https://n8n.autmatization-bot.ru/"
    echo ""
    echo "üìã –î–ª—è MariaDB –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ host: wp-db"
else
    echo "N8N –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./manage.sh start"
fi
